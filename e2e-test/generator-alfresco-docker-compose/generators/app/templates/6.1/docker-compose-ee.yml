# This docker-compose file will spin up an ACS cluster on a local host or on a server and it requires a minimum of 12GB Memory to distribute among containers.
# Limit container memory and assign X percentage to JVM.  There are couple of ways to allocate JVM Memory for ACS Containers
# For example: 'JAVA_OPTS: "$JAVA_OPTS -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"'
# But, as per Oracle docs (https://docs.oracle.com/javase/9/gctuning/parallel-collector1.htm#JSGCT-GUID-CAB83393-3438-44ED-98F0-D15641B43C7D)
# If container memory is not explicitly set, then the above flags will default max heap to 1/4th of container's memory which may not be ideal.
# Hence, setting up explicit Container memory and then assigning a percentage of it to the JVM for performance tuning.

# Using version 2 as 3 does not support resource constraint options (cpu_*, mem_* limits) for non swarm mode in Compose
version: "2"

services:
    alfresco: <% if (httpMode == 'http') { %> 
        image: alfresco/alfresco-content-repository:${ALFRESCO_TAG} <% } else { %>
        build:
          context: ./alfresco-https
          args:
            ALFRESCO_TAG: ${ALFRESCO_TAG}
            TRUSTSTORE_TYPE: JCEKS
            TRUSTSTORE_PASS: kT9X6oe68t
            KEYSTORE_TYPE: JCEKS
            KEYSTORE_PASS: kT9X6oe68t <% } %>
        mem_limit: 1700m
        environment:
            JAVA_OPTS: "
                -Ddb.driver=org.postgresql.Driver
                -Ddb.username=alfresco
                -Ddb.password=alfresco
                -Ddb.url=jdbc:postgresql://postgres:5432/alfresco
                -Dsolr.host=<%=searchSolrHost%>
                -Dsolr.port.ssl=8983
                -Dsolr.secureComms=<%=secureComms%>
                -Dsolr.base.url=/solr <% if (sharding == 'true') { %>
                -Dsolr.useDynamicShardRegistration=true <% } %>
                -Dindex.subsystem.name=solr6
                -Dalfresco-pdf-renderer.url=http://alfresco-pdf-renderer:8090/
                -Djodconverter.url=http://libreoffice:8090/
                -Dimg.url=http://imagemagick:8090/
                -Dtika.url=http://tika:8090/
                -Dsfs.url=http://shared-file-store:8099/
                -Dshare.host=127.0.0.1
                -Dshare.port=8080
                -Dalfresco.host=localhost
                -Dalfresco.port=8080
                -Daos.baseUrlOverwrite=http://localhost:8080/alfresco/aos
                -Dmessaging.broker.url=\"failover:(nio://activemq:61616)?timeout=3000&jms.useCompression=true\"
                -Ddeployment.method=DOCKER_COMPOSE
                -Dlocal.transform.service.enabled=true
                -Dtransform.service.enabled=true
                -Dcsrf.filter.enabled=false
                -Dalfresco.restApi.basicAuthScheme=true
                -Xms1500m -Xmx1500m
                " <% if (httpMode == 'https') { %>
        ports:
            - 8443:8443
        volumes:
            - ./keystores/alfresco:/usr/local/tomcat/alf_data/keystore <% } %>

    <% if (sharding == 'false' && clustering == 'false') { %>
    solr6: <% if (httpMode == 'http') { %>
        image: <%=searchImage%>:${<%=searchTag%>} <% } else { %>
        build:
          context: ./search-https
          args:
            SEARCH_TAG: ${<%=searchTag%>}
            TRUSTSTORE_TYPE: JCEKS
            KEYSTORE_TYPE: JCEKS <% } %>
        mem_limit: 2500m 
        environment:
            #Solr needs to know how to register itself with Alfresco
            SOLR_ALFRESCO_HOST: "alfresco"
            SOLR_ALFRESCO_PORT: "<%=alfrescoPort%>"
            #Alfresco needs to know how to call solr
            SOLR_SOLR_HOST: "solr6"
            SOLR_SOLR_PORT: "8983"
            #Create the default alfresco and archive cores
            SOLR_CREATE_ALFRESCO_DEFAULTS: "alfresco,archive"
            SOLR_JAVA_MEM: "-Xms2g -Xmx2g" <% if (httpMode == 'https') { %>
            SOLR_SSL_TRUST_STORE: "/opt/<%=searchPath%>/keystore/ssl.repo.client.truststore"
            SOLR_SSL_TRUST_STORE_PASSWORD: "kT9X6oe68t"
            SOLR_SSL_TRUST_STORE_TYPE: "JCEKS"
            SOLR_SSL_KEY_STORE: "/opt/<%=searchPath%>/keystore/ssl.repo.client.keystore"
            SOLR_SSL_KEY_STORE_PASSWORD: "kT9X6oe68t"
            SOLR_SSL_KEY_STORE_TYPE: "JCEKS"
            SOLR_SSL_NEED_CLIENT_AUTH: "true"
            SOLR_OPTS: "
                -Dsolr.ssl.checkPeerName=false
                -Dsolr.allow.unsafe.resourceloading=true
            " <% } %>
        ports:
            - 8083:8983 <% if (httpMode == 'https') { %>
        volumes:
            - ./keystores/solr:/opt/<%=searchPath%>/keystore <% } %>
    <% } %>

    <% if (sharding == 'true') { %>
    solr6shard1:
        build:
          context: ./sharding-<%=secureComms%>
          args:
            - SEARCH_TAG=${<%=searchTag%>}
            - SOLR_HOSTNAME=solr6shard1
            - NUM_SHARDS=2
            - SHARD_ID=0
        mem_limit: 2g
        environment:
            #Solr needs to know how to register itself with Alfresco
            SOLR_ALFRESCO_HOST: "alfresco"
            SOLR_ALFRESCO_PORT: "<%=alfrescoPort%>"
            #Alfresco needs to know how to call solr
            SOLR_SOLR_HOST: "solr6shard1"
            SOLR_SOLR_PORT: "8983"
            #Create the default alfresco and archive cores
            SOLR_CREATE_ALFRESCO_DEFAULTS: "alfresco,archive"
            SOLR_JAVA_MEM: "-Xms2g -Xmx2g"
        ports:
            - 8083:8983 #Browser port

    solr6shard2:
        build:
          context: ./sharding-<%=secureComms%>
          args:
            - SEARCH_TAG=${<%=searchTag%>}
            - SOLR_HOSTNAME=solr6shard2
            - NUM_SHARDS=2
            - SHARD_ID=1
        mem_limit: 2g
        environment:
            #Solr needs to know how to register itself with Alfresco
            SOLR_ALFRESCO_HOST: "alfresco"
            SOLR_ALFRESCO_PORT: "<%=alfrescoPort%>"
            #Alfresco needs to know how to call solr
            SOLR_SOLR_HOST: "solr6shard2"
            SOLR_SOLR_PORT: "8983"
            #Create the default alfresco and archive cores
            SOLR_CREATE_ALFRESCO_DEFAULTS: "alfresco,archive"
            SOLR_JAVA_MEM: "-Xms2g -Xmx2g"
        ports:
            - 8084:8983 #Browser port
    <% } %>

    <% if (clustering == 'true') { %>
    solr6master:
        build:
          context: ./replication-<%=secureComms%>
          args:
            SEARCH_TAG: ${<%=searchTag%>}
            SOLR_HOSTNAME: solr6master
            ENABLE_MASTER: "true"
            ENABLE_SLAVE: "false"
        mem_limit: 2g
        environment:
            #Solr needs to know how to register itself with Alfresco
            SOLR_ALFRESCO_HOST: "alfresco"
            SOLR_ALFRESCO_PORT: "<%=alfrescoPort%>"
            #Alfresco needs to know how to call solr
            SOLR_SOLR_HOST: "solr6master"
            SOLR_SOLR_PORT: "8983"
            #Create the default alfresco and archive cores
            SOLR_CREATE_ALFRESCO_DEFAULTS: "alfresco,archive"
            SOLR_JAVA_MEM: "-Xms2g -Xmx2g"
        ports:
            - 8083:8983

    solr6slave:
        build:
          context: ./replication-<%=secureComms%>
          args:
            SEARCH_TAG: ${<%=searchTag%>}
            SOLR_HOSTNAME: solr6slave
            ENABLE_MASTER: "false"
            ENABLE_SLAVE: "true"
            MASTER_HOST: solr6master
        mem_limit: 2g
        environment:
            #Solr needs to know how to register itself with Alfresco
            SOLR_ALFRESCO_HOST: "alfresco"
            SOLR_ALFRESCO_PORT: "<%=alfrescoPort%>"
            #Alfresco needs to know how to call solr
            SOLR_SOLR_HOST: "solr6slave"
            SOLR_SOLR_PORT: "8983"
            #Create the default alfresco and archive cores
            SOLR_CREATE_ALFRESCO_DEFAULTS: "alfresco,archive"
            SOLR_JAVA_MEM: "-Xms2g -Xmx2g"
        ports:
            - 8084:8983
    <% } %>

    <% if (zeppelin == 'true') { %>
    zeppelin: <% if (httpMode == 'http') { %>
        image: quay.io/alfresco/insight-zeppelin:${ZEPPELIN_TAG} <% } else { %>
        build:
          context: ./zeppelin-https
          args:
            - ZEPPELIN_TAG=${ZEPPELIN_TAG} <% } %>
        environment:
            REPO_PROTOCOL: "<%=alfrescoProtocol%>"
            REPO_HOST: "alfresco"
            REPO_PORT: "<%=alfrescoPort%>" <% if (httpMode == 'https') { %>
            JAVA_OPTS: "
                -Dalfresco.enable.ssl=true
                -Dsolr.ssl.checkPeerName=false
                -Djavax.net.ssl.keyStore=/zeppelin/keystore/ssl.repo.client.keystore
                -Djavax.net.ssl.keyStorePassword=kT9X6oe68t
                -Djavax.net.ssl.keyStoreType=JCEKS
                -Djavax.net.ssl.trustStore=/zeppelin/keystore/ssl.repo.client.truststore
                -Djavax.net.ssl.trustStorePassword=kT9X6oe68t
                -Djavax.net.ssl.trustStoreType=JCEKS
            " <% } %>
        ports:
            - 9090:9090 <% if (httpMode == 'https') { %>
        volumes:
            - ./keystores/zeppelin:/zeppelin/keystore <% } %>
    <% } %>

    transform-router:
        mem_limit: 512m
        image: quay.io/alfresco/alfresco-transform-router:${TRANSFORM_ROUTER_TAG}
        environment:
          JAVA_OPTS: " -Xms256m -Xmx512m"
          ACTIVEMQ_URL: "nio://activemq:61616"
          IMAGEMAGICK_URL: "http://imagemagick:8090"
          PDF_RENDERER_URL : "http://alfresco-pdf-renderer:8090"
          LIBREOFFICE_URL : "http://libreoffice:8090"
          TIKA_URL : "http://tika:8090"
          FILE_STORE_URL: "http://shared-file-store:8099/alfresco/api/-default-/private/sfs/versions/1/file"
        links:
          - activemq

    alfresco-pdf-renderer:
        image: quay.io/alfresco/alfresco-pdf-renderer:${PDF_RENDERER_TAG}
        mem_limit: 1g
        environment:
            JAVA_OPTS: " -Xms256m -Xmx512m"
            ACTIVEMQ_URL: "nio://activemq:61616"
            FILE_STORE_URL: "http://shared-file-store:8099/alfresco/api/-default-/private/sfs/versions/1/file"
        ports:
            - 8090:8090
        links:
        - activemq

    imagemagick:
        image: quay.io/alfresco/alfresco-imagemagick:${IMAGE_MAGICK_TAG}
        mem_limit: 1g
        environment:
            JAVA_OPTS: " -Xms256m -Xmx512m"
            ACTIVEMQ_URL: "nio://activemq:61616"
            FILE_STORE_URL: "http://shared-file-store:8099/alfresco/api/-default-/private/sfs/versions/1/file"
        ports:
            - 8091:8090
        links:
        - activemq

    libreoffice:
        image: quay.io/alfresco/alfresco-libreoffice:${LIBREOFFICE_TAG}
        mem_limit: 1g
        environment:
            JAVA_OPTS: " -Xms256m -Xmx512m"
            ACTIVEMQ_URL: "nio://activemq:61616"
            FILE_STORE_URL: "http://shared-file-store:8099/alfresco/api/-default-/private/sfs/versions/1/file"
        ports:
            - 8092:8090
        links:
        - activemq

    tika:
        image: quay.io/alfresco/alfresco-tika:${TIKA_TAG}
        mem_limit: 1g
        environment:
            JAVA_OPTS: " -Xms256m -Xmx512m"
            ACTIVEMQ_URL: "nio://activemq:61616"
            FILE_STORE_URL: "http://shared-file-store:8099/alfresco/api/-default-/private/sfs/versions/1/file"
        ports:
            - 8093:8090
        links:
        - activemq

    shared-file-store:
        image: alfresco/alfresco-shared-file-store:${SHARED_FILE_STORE_TAG}
        mem_limit: 512m
        environment:
            JAVA_OPTS: " -Xms256m -Xmx512m"
            scheduler.content.age.millis: 86400000
            scheduler.cleanup.interval: 86400000
        ports:
            - 8099:8099
        volumes:
            - shared-file-store-volume:/tmp/Alfresco/sfs

    share:
        image: alfresco/alfresco-share:${SHARE_TAG}
        mem_limit: 1g
        environment:
            REPO_HOST: "alfresco"
            REPO_PORT: "8080"
            JAVA_OPTS: "
                -Xms500m
                -Xmx500m
                -Dalfresco.host=localhost
                -Dalfresco.port=8080
                -Dalfresco.context=alfresco
                -Dalfresco.protocol=http
                "

    postgres:
        image: postgres:${POSTGRES_TAG}
        mem_limit: 512m
        environment:
            - POSTGRES_PASSWORD=alfresco
            - POSTGRES_USER=alfresco
            - POSTGRES_DB=alfresco
        command: postgres -c max_connections=300 -c log_min_messages=LOG
        ports:
            - 5432:5432

    activemq:
        image: alfresco/alfresco-activemq:${ACTIVE_MQ_TAG}
        mem_limit: 1g
        ports:
            - 8161:8161 # Web Console
            - 5672:5672 # AMQP
            - 61616:61616 # OpenWire
            - 61613:61613 # STOMP

    digital-workspace:
        image: quay.io/alfresco/alfresco-digital-workspace:${DIGITAL_WORKSPACE_TAG}
        mem_limit: 128m
        environment:
            BASEPATH: ./

    proxy:
        image: quay.io/alfresco/alfresco-acs-nginx:${ACS_NGINX_TAG}
        mem_limit: 128m
        depends_on:
            - alfresco
            - digital-workspace
        ports:
            - 8080:8080
        links:
            - digital-workspace
            - alfresco
            - share

volumes:
    shared-file-store-volume:
        driver_opts:
            type: tmpfs
            device: tmpfs
